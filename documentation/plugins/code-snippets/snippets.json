{
  "di_singleton_class": {
    "file": "src/main/kotlin/com/typewritermc/example/DependencyInjectionExample.kt",
    "content": "// highlight-next-line\n@Singleton\nclass ExampleService {\n    fun greet(player: Player) {\n        player.sendMessage(\"Hello ${player.name}\")\n    }\n}"
  },
  "di_singleton_object": {
    "file": "src/main/kotlin/com/typewritermc/example/DependencyInjectionExample.kt",
    "content": "// highlight-next-line\n@Singleton\nobject ExampleObject {\n    const val prefix: String = \"[Typewriter]\"\n}"
  },
  "di_singleton_function": {
    "file": "src/main/kotlin/com/typewritermc/example/DependencyInjectionExample.kt",
    "content": "// highlight-next-line\n@Singleton\nfun providePrefix(): String = \"[Typewriter]\""
  },
  "di_singleton_inject": {
    "file": "src/main/kotlin/com/typewritermc/example/DependencyInjectionExample.kt",
    "content": "class ExampleSingletonUsage : KoinComponent {\n    // highlight-next-line\n    private val service: ExampleService by inject()\n\n    fun welcome(player: Player) {\n        service.greet(player)\n        // highlight-start\n        // Or if you want to directly get the prefix inline you can do:\n        val prefix: String = KoinJavaComponent.get(String::class.java)\n        // highlight-end\n        player.sendMessage(prefix)\n    }\n}"
  },
  "di_factory_class": {
    "file": "src/main/kotlin/com/typewritermc/example/DependencyInjectionExample.kt",
    "content": "// highlight-next-line\n@Factory\nclass ExampleRunner(\n    // Parameters are automatically injected by Koin,\n    // make sure to register these types with @Singleton or @Factory\n    private val service: ExampleService,\n) {\n    fun start(player: Player) {\n        service.greet(player)\n    }\n}"
  },
  "di_factory_function": {
    "file": "src/main/kotlin/com/typewritermc/example/DependencyInjectionExample.kt",
    "content": "// highlight-next-line\n@Factory\nfun createGson(): Gson = GsonBuilder().setPrettyPrinting().create()"
  },
  "di_factory_inject": {
    "file": "src/main/kotlin/com/typewritermc/example/DependencyInjectionExample.kt",
    "content": "class TrackerManager : KoinComponent {\n    // highlight-start\n    // You can inject a factory like this,\n    // it will create a new instance every time you get the field\n    val exampleRunner: ExampleRunner by inject()\n    // highlight-end\n\n    fun create(): ExampleRunner =\n    // highlight-start\n        // Or you can get it from the Koin scope directly\n        KoinJavaComponent.get(ExampleObject::class.java)\n    // highlight-end\n}"
  },
  "di_named_function": {
    "file": "src/main/kotlin/com/typewritermc/example/DependencyInjectionExample.kt",
    "content": "@Factory\n// highlight-next-line\n@Named(\"exampleParser\")\nfun provideParser(): Gson = GsonBuilder().create()"
  },
  "di_named_inject": {
    "file": "src/main/kotlin/com/typewritermc/example/DependencyInjectionExample.kt",
    "content": "@Factory\nclass ParserUser(\n    // highlight-next-line\n    @Inject(\"exampleParser\") val parser: Gson,\n)"
  },
  "di_named_usage": {
    "file": "src/main/kotlin/com/typewritermc/example/DependencyInjectionExample.kt",
    "content": "class NamedUsage : KoinComponent {\n    // highlight-next-line\n    private val parser: Gson by inject(named(\"exampleParser\"))\n}"
  },
  "di_named_usage_java": {
    "file": "src/main/kotlin/com/typewritermc/example/DependencyInjectionExample.kt",
    "content": "class NamedUsageJava {\n    private val parser: Gson =\n        // highlight-next-line\n        KoinJavaComponent.get(Gson::class.java, named(\"exampleParser\"))\n}"
  },
  "di_parameter_factory": {
    "file": "src/main/kotlin/com/typewritermc/example/DependencyInjectionExample.kt",
    "content": "@Factory\nclass GreetingTracker(\n    // highlight-next-line\n    @Parameter val player: Player,\n    private val service: ExampleService,\n) {\n    fun greet() {\n        service.greet(player)\n    }\n}"
  },
  "di_parameter_usage": {
    "file": "src/main/kotlin/com/typewritermc/example/DependencyInjectionExample.kt",
    "content": "class ParameterManager : KoinComponent {\n    fun trackerFor(player: Player): GreetingTracker =\n        // highlight-next-line\n        getKoin().get(parameters = { parametersOf(player) })\n}"
  },
  "di_get_all": {
    "file": "src/main/kotlin/com/typewritermc/example/DependencyInjectionExample.kt",
    "content": "class GetAllExample : KoinComponent {\n    fun services(): List<ExampleService> =\n        // highlight-next-line\n        getKoin().getAll()\n}"
  },
  "initializer": {
    "file": "src/main/kotlin/com/typewritermc/example/ExampleInitializer.kt",
    "content": "import com.typewritermc.core.extension.Initializable\nimport com.typewritermc.core.extension.annotations.Singleton\n\n@Singleton\nobject ExampleInitializer : Initializable {\n    override suspend fun initialize() {\n        // Do something when the extension is initialized\n    }\n\n    override suspend fun shutdown() {\n        // Do something when the extension is shutdown\n    }\n}"
  },
  "query_multiple": {
    "file": "src/main/kotlin/com/typewritermc/example/QueryExample.kt",
    "content": "    val entries = Query.find<MyEntry>()"
  },
  "query_multiple_with_filter": {
    "file": "src/main/kotlin/com/typewritermc/example/QueryExample.kt",
    "content": "    val entries = Query.findWhere<MyEntry> {\n        it.someField == \"some value\"\n    }"
  },
  "query_by_id": {
    "file": "src/main/kotlin/com/typewritermc/example/QueryExample.kt",
    "content": "    val id = \"some_id\"\n    val entry = Query.findById<MyEntry>(id)"
  },
  "query_from_page": {
    "file": "src/main/kotlin/com/typewritermc/example/QueryExample.kt",
    "content": "    val pageId = \"some_page_id\"\n    val entries = Query.findWhereFromPage<MyEntry>(pageId) {\n        it.someField == \"some value\"\n    }"
  },
  "trigger_without_context": {
    "file": "src/main/kotlin/com/typewritermc/example/TriggerExample.kt",
    "content": "    // If you only have one entry\n    val triggerEntry: TriggerEntry = Query.findById<MyTriggerableEntry>(\"some_id\") ?: return\n    // Triggers all the next entries in the sequence.\n    triggerEntry.triggerAllFor(player, context())\n\n    // If you have multiple entries\n    val triggerEntries: Sequence<TriggerEntry> = Query.find<MyTriggerableEntry>()\n    // Triggers all the next entries for all entries.\n    triggerEntries.triggerAllFor(player, context())"
  },
  "start_dialogue_with_or_trigger": {
    "file": "src/main/kotlin/com/typewritermc/example/TriggerExample.kt",
    "content": "    val triggerEntries: Sequence<MyTriggerableEntry> = Query.find<MyTriggerableEntry>()\n    triggerEntries.startDialogueWithOrNextDialogue(player, context())\n\n    // Or trigger something completely different when the player is in dialogue:\n    val customTrigger: EventTrigger = InteractionEndTrigger\n    triggerEntries.startDialogueWithOrTrigger(player, customTrigger, context())"
  },
  "trigger_with_context": {
    "file": "src/main/kotlin/com/typewritermc/example/TriggerExample.kt",
    "content": "    // The context that you have, most likely provided by Typewriter in some way.\n    val context = player.interactionContext ?: context()\n    // Triggers all the next entries in the sequence.\n    triggerEntries.triggerAllFor(player, context)"
  },
  "interaction_triggers": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/interaction/ExampleInteraction.kt",
    "content": "// Trigger to start the interaction\ndata class ExampleStartTrigger(\n    val priority: Int,\n    val eventTriggers: List<EventTrigger> = emptyList()\n) : EventTrigger {\n    override val id: String = \"example.start\"\n}\n\n// Trigger to stop the interaction\ndata object ExampleStopTrigger : EventTrigger {\n    override val id: String = \"example.stop\"\n}"
  },
  "dialogue_triggers": {
    "file": "src/main/kotlin/com/typewritermc/example/TriggerExample.kt",
    "content": "    // Next dialogue should be triggered or the current dialogue should complete its typing animation.\n    DialogueTrigger.NEXT_OR_COMPLETE.triggerFor(player, context())\n\n    // Forces the next dialogue to be triggered, even if the animation hasn't finished.\n    DialogueTrigger.FORCE_NEXT.triggerFor(player, context())"
  },
  "temporal_triggers": {
    "file": "src/main/kotlin/com/typewritermc/example/TriggerExample.kt",
    "content": "    // To start a temporal sequence\n    TemporalStartTrigger(\n        pageId = \"some_id\",\n        eventTriggers = listOf<EventTrigger>(),\n        settings = TemporalSettings(\n            blockChatMessages = true,\n            blockActionBarMessages = true\n        )\n    ).triggerFor(player, context())\n\n    // To stop the temporal sequence and trigger the following entries.\n    TemporalStopTrigger.triggerFor(player, player.interactionContext ?: context())"
  },
  "simple_placeholder_entry": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/ExamplePlaceholderEntry.kt",
    "content": "class SimpleExamplePlaceholderEntry(\n    override val id: String,\n    override val name: String,\n) : PlaceholderEntry {\n    override fun parser(): PlaceholderParser = placeholderParser {\n        supply { player ->\n            \"Hello, ${player?.name ?: \"World\"}!\"\n        }\n    }\n}"
  },
  "literal_placeholder_entry": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/ExamplePlaceholderEntry.kt",
    "content": "    override fun parser(): PlaceholderParser = placeholderParser {\n        literal(\"greet\") {\n            literal(\"enthusiastic\") {\n                supply { player ->\n                    \"HEY HOW IS YOUR DAY, ${player?.name ?: \"World\"}!\"\n                }\n            }\n            supply { player ->\n                \"Hello, ${player?.name ?: \"World\"}\"\n            }\n        }\n        supply {\n            \"Standard text\"\n        }\n    }"
  },
  "string_placeholder_entry": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/ExamplePlaceholderEntry.kt",
    "content": "    override fun parser(): PlaceholderParser = placeholderParser {\n        string(\"name\") { name ->\n            supply {\n                \"Hello, ${name()}!\"\n            }\n        }\n    }"
  },
  "cinematic_entry": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/cinematic/ExampleCinematicEntry.kt",
    "content": "@Entry(\"example_cinematic\", \"An example cinematic entry\", Colors.BLUE, \"material-symbols:cinematic-blur\")\nclass ExampleCinematicEntry(\n    override val id: String = \"\",\n    override val name: String = \"\",\n    override val criteria: List<Criteria> = emptyList(),\n    @Segments(Colors.BLUE, \"material-symbols:cinematic-blur\")\n    val segments: List<ExampleSegment> = emptyList(),\n) : CinematicEntry {\n    override fun create(player: Player): CinematicAction {\n        return ExampleCinematicAction(player, this)\n    }\n}"
  },
  "cinematic_segment_with_min_max": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/cinematic/ExampleCinematicEntry.kt",
    "content": "    @Segments(Colors.BLUE, \"material-symbols:cinematic-blur\")\n    @InnerMin(Min(10))\n    @InnerMax(Max(20))\n    val segments: List<ExampleSegment> = emptyList(),"
  },
  "cinematic_create_actions": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/cinematic/ExampleCinematicEntry.kt",
    "content": "    // This will be used when the cinematic is normally displayed to the player.\n    override fun create(player: Player): CinematicAction {\n        return DefaultCinematicAction(player, this)\n    }\n\n    // This is used during content mode to display the cinematic to the player.\n    // It may be null to not show it during simulation.\n    override fun createSimulating(player: Player): CinematicAction? {\n        return SimulatedCinematicAction(player, this)\n    }\n\n    // This is used during content mode to record the cinematic.\n    // It may be null to not record it during simulation.\n    override fun createRecording(player: Player): CinematicAction? {\n        return RecordingCinematicAction(player, this)\n    }"
  },
  "cinematic_segment": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/cinematic/ExampleCinematicEntry.kt",
    "content": "data class ExampleSegment(\n    override val startFrame: Int = 0,\n    override val endFrame: Int = 0,\n) : Segment"
  },
  "cinematic_action": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/cinematic/ExampleCinematicEntry.kt",
    "content": "class ExampleCinematicAction(\n    val player: Player,\n    val entry: ExampleCinematicEntry,\n) : CinematicAction {\n    override suspend fun setup() {\n        // Initialize variables, spawn entities, etc.\n    }\n\n    override suspend fun tick(frame: Int) {\n        val segment = entry.segments activeSegmentAt frame\n        // Can be null if no segment is active\n\n        // The `frame` parameter is not necessarily next frame: `frame != old(frame)+1`\n\n        // Execute tick logic for the segment\n    }\n\n    override suspend fun teardown() {\n        // Remove entities, etc.\n    }\n\n    override fun canFinish(frame: Int): Boolean = entry.segments canFinishAt frame\n}"
  },
  "cinematic_simple_action": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/cinematic/ExampleCinematicEntry.kt",
    "content": "class ExampleSimpleTemporalAction(\n    val player: Player,\n    entry: ExampleCinematicEntry,\n) : SimpleCinematicAction<ExampleSegment>() {\n    override val segments: List<ExampleSegment> = entry.segments\n\n    override suspend fun startSegment(segment: ExampleSegment) {\n        super.startSegment(segment) // Keep this\n        // Called when a segment starts\n    }\n\n    override suspend fun tickSegment(segment: ExampleSegment, frame: Int) {\n        super.tickSegment(segment, frame) // Keep this\n        // Called every tick while the segment is active\n        // Will always be called after startSegment and never after stopSegment\n\n        // The `frame` parameter is not necessarily next frame: `frame != old(frame)+1`\n    }\n\n    override suspend fun stopSegment(segment: ExampleSegment) {\n        super.stopSegment(segment) // Keep this\n        // Called when the segment ends\n        // Will also be called if the cinematic is stopped early\n    }\n}"
  },
  "basic_interaction": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/interaction/ExampleInteraction.kt",
    "content": "class ExampleInteraction(\n    val player: Player,\n    override val context: InteractionContext,\n    override val priority: Int,\n    val eventTriggers: List<EventTrigger>\n) : Interaction {\n    override suspend fun initialize(): Result<Unit> {\n        if (Random.nextBoolean()) {\n            // Failing during initialization makes it so that the interaction will be stopped.\n            return failure(\"Failed to initialize\")\n        }\n\n        // Setup your interaction state\n        player.sendMessage(\"Starting interaction!\")\n\n        return ok(Unit)\n    }\n\n    override suspend fun tick(deltaTime: Duration) {\n        // Update your interaction state\n        if (shouldEnd()) {\n            // Trigger the stop event when done\n            ExampleStopTrigger.triggerFor(player, context)\n        }\n    }\n\n    override suspend fun teardown(force: Boolean) {\n        // Cleanup your interaction state\n        player.sendMessage(\"Ending interaction!\")\n    }\n\n    private fun shouldEnd(): Boolean = false // Your end condition\n}"
  },
  "interaction_trigger_handler": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/interaction/ExampleInteraction.kt",
    "content": "@Singleton // This registers the handler to Typewriter\nclass ExampleTriggerHandler : TriggerHandler {\n    override suspend fun trigger(event: Event, currentInteraction: Interaction?): TriggerContinuation {\n        // Handle stopping the interaction\n        if (ExampleStopTrigger in event && currentInteraction is ExampleInteraction) {\n            return TriggerContinuation.Multi(\n                TriggerContinuation.EndInteraction,\n                TriggerContinuation.Append(Event(event.player, currentInteraction.context, currentInteraction.eventTriggers)),\n            )\n        }\n\n        // Handle starting the interaction\n        return tryStartExampleInteraction(event)\n    }\n\n    private fun tryStartExampleInteraction(\n        event: Event\n    ): TriggerContinuation {\n        // Find all start triggers in the event\n        val triggers = event.triggers\n            .filterIsInstance<ExampleStartTrigger>()\n\n        if (triggers.isEmpty()) return TriggerContinuation.Nothing\n\n        // Use the highest priority trigger\n        val trigger = triggers.maxBy { it.priority }\n\n        // Start the interaction\n        return TriggerContinuation.StartInteraction(\n            ExampleInteraction(\n                event.player,\n                event.context,\n                trigger.priority,\n                trigger.eventTriggers\n            )\n        )\n    }\n}"
  },
  "interaction_entry": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/interaction/ExampleInteraction.kt",
    "content": "@Entry(\"example_interaction\", \"Start an example interaction\", Colors.RED, \"mdi:play\")\nclass ExampleInteractionActionEntry(\n    override val id: String = \"\",\n    override val name: String = \"\",\n    override val criteria: List<Criteria> = emptyList(),\n    override val modifiers: List<Modifier> = emptyList(),\n    override val triggers: List<Ref<TriggerableEntry>> = emptyList(),\n) : ActionEntry {\n    // Preventing the `triggers` from being used, instead we pass them to the interaction\n    // And also start the interaction when the entry is triggered.\n    override val eventTriggers: List<EventTrigger>\n        get() = listOf(\n            ExampleStartTrigger(\n                this.priority,\n                super.eventTriggers\n            )\n        )\n\n    override fun ActionTrigger.execute() {}\n}"
  },
  "interaction_bound": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/interaction/ExampleInteractionBound.kt",
    "content": "@Entry(\"example_bound\", \"An example interaction bound\", Colors.MEDIUM_PURPLE, \"mdi:square-rounded\")\nclass ExampleBoundEntry(\n    override val id: String = \"\",\n    override val name: String = \"\",\n    override val criteria: List<Criteria> = emptyList(),\n    override val modifiers: List<Modifier> = emptyList(),\n    override val triggers: List<Ref<TriggerableEntry>> = emptyList(),\n    override val interruptTriggers: List<Ref<TriggerableEntry>> = emptyList(),\n) : InteractionBoundEntry {\n    override fun build(player: Player): InteractionBound =\n        ExampleBound(player, priority, interruptTriggers.eventTriggers)\n}\n\nclass ExampleBound(\n    private val player: Player,\n    override val priority: Int,\n    override val interruptionTriggers: List<EventTrigger>,\n) : ListenerInteractionBound {\n\n    override suspend fun initialize() {\n        super.initialize()\n        // Setup initial state\n    }\n\n    @EventHandler(priority = EventPriority.HIGHEST)\n    private fun onPlayerAction(event: SomeCancellablePlayerEvent) {\n        if (event.player.uniqueId != player.uniqueId) return\n\n        if (boundConditionBroken()) {\n            // For PlayerEvents, we have a handy method to handle the breaking\n            handleEvent(event)\n\n            // A manual version of the above\n            when (event.player.boundState) {\n                InteractionBoundState.BLOCKING -> event.isCancelled = true\n                InteractionBoundState.INTERRUPTING -> event.player.interruptInteraction()\n                InteractionBoundState.IGNORING -> {}\n            }\n        }\n    }\n\n    private fun boundConditionBroken(): Boolean {\n        // Check if the bound condition is broken\n        return false\n    }\n\n    override suspend fun tick() {\n        // Do something every tick\n    }\n\n    override suspend fun teardown() {\n        // Cleanup any state\n        super.teardown()\n    }\n}"
  },
  "audience_entry": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/manifest/ExampleAudienceEntry.kt",
    "content": "@Entry(\"example_audience\", \"An example audience entry.\", Colors.GREEN, \"material-symbols:chat-rounded\")\nclass ExampleAudienceEntry(\n    override val id: String = \"\",\n    override val name: String = \"\",\n) : AudienceEntry {\n    override suspend fun display(): AudienceDisplay {\n        return ExampleAudienceDisplay()\n    }\n}"
  },
  "audience_display": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/manifest/ExampleAudienceEntry.kt",
    "content": "class ExampleAudienceDisplay : AudienceDisplay() {\n    override fun initialize() {\n        // This is called when the first player is added to the audience.\n        super.initialize()\n        // Do something when the audience is initialized\n    }\n\n    override fun onPlayerAdd(player: Player) {\n        // Do something when a player gets added to the audience\n    }\n\n    override fun onPlayerRemove(player: Player) {\n        // Do something when a player gets removed from the audience\n    }\n\n    override fun dispose() {\n        super.dispose()\n        // Do something when the audience is disposed\n        // It will always call onPlayerRemove for all players.\n        // So no player cleanup is needed here.\n    }\n}"
  },
  "tickable_audience_display": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/manifest/ExampleAudienceEntry.kt",
    "content": "// highlight-next-line\nclass TickableAudienceDisplay : AudienceDisplay(), TickableDisplay {\n    override fun onPlayerAdd(player: Player) {}\n    override fun onPlayerRemove(player: Player) {}\n\n    // highlight-start\n    override fun tick() {\n        // Do something when the audience is ticked\n        players.forEach { player ->\n            // Do something with the player\n        }\n\n        // This is running asynchronously\n        // If you need to do something on the main thread\n        Dispatchers.Sync.launch {\n            // Though this will run a tick later, to sync with the bukkit scheduler.\n        }\n    }\n    // highlight-end\n}"
  },
  "audience_display_with_events": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/manifest/ExampleAudienceEntry.kt",
    "content": "class AudienceDisplayWithEvents : AudienceDisplay() {\n    override fun onPlayerAdd(player: Player) {}\n    override fun onPlayerRemove(player: Player) {}\n\n    // highlight-start\n    @EventHandler\n    fun onSomeEvent(event: SomeBukkitEvent) {\n        // Do something when the event is triggered\n        // This will trigger for all players, not just the ones in the audience.\n        // So we need to check if the player is in the audience.\n        if (event.player in this) {\n            // Do something with the player\n        }\n    }\n    // highlight-end\n}"
  },
  "check_player_in_audience": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/manifest/ExampleAudienceEntry.kt",
    "content": "    if (player.inAudience(ref)) {\n        // Do something with the player\n    }"
  },
  "audience_filter_entry": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/manifest/ExampleAudienceFilter.kt",
    "content": "@Entry(\"example_audience_filter\", \"An example audience filter.\", Colors.MYRTLE_GREEN, \"material-symbols:filter-alt\")\nclass ExampleAudienceFilterEntry(\n    override val id: String = \"\",\n    override val name: String = \"\",\n    override val children: List<Ref<out AudienceEntry>> = emptyList(),\n) : AudienceFilterEntry {\n    override suspend fun display(): AudienceFilter = ExampleAudienceFilter(ref())\n}"
  },
  "audience_filter": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/manifest/ExampleAudienceFilter.kt",
    "content": "class ExampleAudienceFilter(\n    ref: Ref<out AudienceFilterEntry>\n) : AudienceFilter(ref) {\n    override fun filter(player: Player): Boolean {\n        return player.name.startsWith(\"g\")\n    }\n}"
  },
  "audience_filter_dynamic": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/manifest/ExampleAudienceFilter.kt",
    "content": "class HealthAudienceFilter(\n    ref: Ref<out AudienceFilterEntry>,\n// highlight-next-line\n    private val healthRange: ClosedFloatingPointRange<Float> = 0f..20f\n) : AudienceFilter(ref), TickableDisplay {\n    override fun filter(player: Player): Boolean {\n// highlight-next-line\n        return player.health in healthRange\n    }\n\n    // highlight-start\n    // You can refresh the filters on events\n    @EventHandler\n    fun healthRegent(event: EntityRegainHealthEvent) {\n        val player = event.entity as? Player ?: return\n        // Reruns the filter\n        player.refresh()\n\n        // Or if you know the player should be filtered, you can update the filter directly\n        player.updateFilter(isFiltered = event.amount in healthRange)\n    }\n    // highlight-end\n\n    // highlight-start\n    // It is also possible to run the filter every tick\n    override fun tick() {\n        // Refresh the filter for all considered players\n        consideredPlayers.forEach { it.refresh() }\n    }\n    // highlight-end\n}"
  },
  "audience_filter_invertable": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/manifest/ExampleAudienceFilter.kt",
    "content": "@Entry(\"inverted_example_audience_filter\", \"An example audience filter.\", Colors.MYRTLE_GREEN, \"material-symbols:filter-alt\")\nclass InvertedExampleAudienceFilterEntry(\n    override val id: String = \"\",\n    override val name: String = \"\",\n    override val children: List<Ref<out AudienceEntry>> = emptyList(),\n    // highlight-green\n    override val inverted: Boolean = true,\n    // highlight-next-line\n) : AudienceFilterEntry, Invertible {\n    override suspend fun display(): AudienceFilter = ExampleAudienceFilter(ref())\n}"
  },
  "single_filter_basic": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/manifest/ExampleAudienceSingleFilter.kt",
    "content": "@Entry(\"example_single_filter\", \"An example single filter entry\", Colors.MYRTLE_GREEN, \"material-symbols:filter-alt\")\nclass ExampleSingleFilterEntry(\n    override val id: String = \"\",\n    override val name: String = \"\",\n    override val priorityOverride: Optional<Int> = Optional.empty(),\n) : AudienceFilterEntry, PriorityEntry {\n    override val children: List<Ref<out AudienceEntry>> get() = emptyList()\n\n    override suspend fun display(): AudienceFilter = ExampleSingleFilter(ref()) { player ->\n        PlayerExampleDisplay(player, ExampleSingleFilter::class, ref())\n    }\n}\n\nprivate class ExampleSingleFilter(\n    ref: Ref<ExampleSingleFilterEntry>,\n    createDisplay: (Player) -> PlayerExampleDisplay,\n) : SingleFilter<ExampleSingleFilterEntry, PlayerExampleDisplay>(ref, createDisplay) {\n    // highlight-start\n    // This must be a references to a shared map.\n    // It CANNOT cache the map itself.\n    override val displays: MutableMap<UUID, PlayerExampleDisplay>\n        get() = map\n    // highlight-end\n\n    // highlight-start\n    companion object {\n        // This map is shared between all instances of the filter.\n        private val map = ConcurrentHashMap<UUID, PlayerExampleDisplay>()\n    }\n    // highlight-end\n}\n\nprivate class PlayerExampleDisplay(\n    player: Player,\n    displayKClass: KClass<out SingleFilter<ExampleSingleFilterEntry, *>>,\n    current: Ref<ExampleSingleFilterEntry>\n) : PlayerSingleDisplay<ExampleSingleFilterEntry>(player, displayKClass, current) {\n    override fun setup() {\n        super.setup()\n        player.sendMessage(\"Display activated!\")\n    }\n\n    override fun tearDown() {\n        super.tearDown()\n        player.sendMessage(\"Display deactivated!\")\n    }\n}"
  },
  "single_filter_lifecycle": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/manifest/ExampleAudienceSingleFilter.kt",
    "content": "private class ComplexPlayerDisplay(\n    player: Player,\n    displayKClass: KClass<out SingleFilter<ExampleSingleFilterEntry, *>>,\n    current: Ref<ExampleSingleFilterEntry>\n) : PlayerSingleDisplay<ExampleSingleFilterEntry>(player, displayKClass, current) {\n    override fun initialize() {\n        super.initialize()\n        // Called once when the display is first created\n        player.sendMessage(\"Display initialized!\")\n    }\n\n    override fun setup() {\n        super.setup()\n        // Called every time this display becomes active\n        player.sendMessage(\"Display setup!\")\n    }\n\n    override fun tick() {\n        // Called every tick while the display is active\n        // Update display content here\n    }\n\n    override fun tearDown() {\n        super.tearDown()\n        // Called when this display becomes inactive\n        player.sendMessage(\"Display torn down!\")\n    }\n\n    override fun dispose() {\n        super.dispose()\n        // Called when the display is being completely removed\n        player.sendMessage(\"Display disposed!\")\n    }\n}\n"
  },
  "single_path_stream_display": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/manifest/pathstream/PathStreamBasics.kt",
    "content": "class SingleDisplayEntry(\n    override val id: String = \"\",\n    override val name: String = \"\",\n    private val road: Ref<RoadNetworkEntry> = emptyRef(),\n    private val display: Ref<PathStreamDisplayEntry> = emptyRef(),\n    val target: Position = Position.ORIGIN,\n) : AudienceEntry {\n    override suspend fun display(): AudienceDisplay =\n        SinglePathStreamDisplay(\n            road,\n            { display },\n            endPosition = { target }\n        )\n}"
  },
  "multi_path_stream_display": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/manifest/pathstream/PathStreamBasics.kt",
    "content": "class MultiDisplayEntry(\n    override val id: String = \"\",\n    override val name: String = \"\",\n    private val road: Ref<RoadNetworkEntry> = emptyRef(),\n    private val display: Ref<PathStreamDisplayEntry> = emptyRef(),\n    private val targets: List<Position> = emptyList(),\n) : AudienceEntry {\n    override suspend fun display(): AudienceDisplay =\n        MultiPathStreamDisplay(road) { player ->\n            targets.mapIndexed { index, target ->\n                StreamProducer(\n                    // ID must stay consistent between calls to this supplier.\n                    // It is used to efficiently manage the display.\n                    id = \"$index\",\n                    display,\n                    // Though the location itself can change, even dynamically,\n                    endPosition = { target }\n                )\n            }\n        }\n}"
  },
  "path_stream_display_entry": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/manifest/pathstream/PathStreamDisplayExample.kt",
    "content": "class ExamplePathStreamDisplayEntry(\n    override val id: String = \"\",\n    override val name: String = \"\",\n    override val children: List<Ref<out AudienceEntry>> = emptyList(),\n    override val refreshDuration: Duration = Duration.ofMillis(1700),\n    val travelSpeed: Double = 20.0,\n) : PathStreamDisplayEntry {\n    override fun createDisplay(player: Player): PathStreamDisplay = ExampleParticleDisplay(player)\n\n    override fun createProducer(\n        player: Player,\n        roadNetwork: Ref<RoadNetworkEntry>,\n        startPosition: (Player) -> Position,\n        endPosition: (Player) -> Position,\n    ): PathStreamProducer =\n        LinePathStreamProducer(\n            player = player,\n            ref = ref(),\n            roadNetwork = roadNetwork,\n            startPosition = startPosition,\n            endPosition = endPosition,\n            refreshDuration = refreshDuration,\n            speed = travelSpeed,\n            displayEntries = displays(), // A helper function that retrieves the correct display entries\n        )\n}"
  },
  "custom_path_stream_display": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/manifest/pathstream/PathStreamDisplayExample.kt",
    "content": "class ExampleParticleDisplay(private val player: Player) : PathStreamDisplay {\n    override fun display(position: Position) {\n        player.spawnParticle(Particle.FLAME, position.x, position.y, position.z, 1)\n    }\n\n    override fun dispose() {\n        // As path stream displays are stateful, you can clean up resources here if needed.\n    }\n}"
  },
  "custom_path_stream_producer": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/manifest/pathstream/PathStreamDisplayExample.kt",
    "content": "class ExampleProducer(\n    player: Player,\n    id: String,\n    roadNetwork: Ref<RoadNetworkEntry>,\n    startPosition: (Player) -> Position,\n    endPosition: (Player) -> Position,\n    refreshDuration: Duration,\n    displayEntries: List<Ref<PathStreamDisplayEntry>>,\n) : PathStreamProducer(\n    player,\n    id,\n    roadNetwork,\n    startPosition,\n    endPosition,\n    refreshDuration,\n    { displayEntries.createDisplays(it) },\n) {\n    override suspend fun refreshPath(): PathStream? {\n        // This is a massive helper function. There are a few more helper functions that allow you to\n        // separate our the different parts of the path finding.\n        val (_edges, _paths) = calculatePathing() ?: return null\n\n        // Here is the logic for the calculatePathing, you can use any of the helper functions\n        // as you like.\n        val (start: Position, end: Position) = points() ?: return null\n        val edges: List<GPSEdge> = findEdges() ?: return null\n        val visibleEdges: List<GPSEdge> = edges.filterVisible(start, end)\n        val paths: List<List<Position>> = findPaths(visibleEdges) ?: return null\n\n        val line = paths.flatten()\n        if (line.isEmpty()) return null\n\n        // Create a path stream which is used to keep track of the current position and forwards for displaying.\n        // Typewriter will automatically trigger the sub functions for you.\n        return ExamplePathStream(displaySupplier(player), line)\n    }\n}"
  },
  "custom_path_stream": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/manifest/pathstream/PathStreamDisplayExample.kt",
    "content": "class ExamplePathStream(\n    displays: List<PathStreamDisplay>,\n    private val points: List<Position>,\n) : PathStream(displays) {\n    private var index = 0\n\n    // This is allowed to have state and complex logic to find the next position.\n    override fun forwardPath(): Position {\n        return points[(index++).coerceAtMost(points.size - 1)]\n    }\n\n    // This is to indicate whether the path stream should continue or not.\n    // When this returns false, the path stream will stop and no longer be displayed.\n    override fun shouldContinue(): Boolean {\n        return index < points.size\n    }\n\n    // Can be used to clean up resources or state when the path stream is no longer needed.\n    override fun dispose() {\n        // Make sure to keep the super.dispose() call to clean up the displays.\n        super.dispose()\n    }\n}"
  },
  "artifact_entry": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/static/ExampleArtifactEntry.kt",
    "content": "@Entry(\"example_artifact\", \"An example artifact entry.\", Colors.BLUE, \"material-symbols:home-storage-rounded\")\nclass ExampleArtifactEntry(\n    override val id: String = \"\",\n    override val name: String = \"\",\n    override val artifactId: String = \"\",\n) : ArtifactEntry"
  },
  "artifact_access": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/static/ExampleArtifactEntry.kt",
    "content": "suspend fun accessArtifactData(ref: Ref<out ArtifactEntry>) {\n    val assetManager = KoinJavaComponent.get<AssetManager>(AssetManager::class.java)\n    val entry = ref.get() ?: return\n    val content: String? = assetManager.fetchAsset(entry)\n    // Do something with the content\n}"
  },
  "asset_entry": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/static/ExampleAssetEntry.kt",
    "content": "@Entry(\"example_asset\", \"An example asset entry.\", Colors.BLUE, \"material-symbols:home-storage-rounded\")\nclass ExampleAssetEntry(\n    override val id: String = \"\",\n    override val name: String = \"\",\n    override val path: String = \"\",\n) : AssetEntry"
  },
  "asset_access": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/static/ExampleAssetEntry.kt",
    "content": "suspend fun accessAssetData(ref: Ref<out AssetEntry>) {\n    val assetManager = KoinJavaComponent.get<AssetManager>(AssetManager::class.java)\n    val entry = ref.get() ?: return\n    val content: String? = assetManager.fetchAsset(entry)\n    // Do something with the content\n}"
  },
  "sound_id_entry": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/static/ExampleSoundIdEntry.kt",
    "content": "@Entry(\"example_sound\", \"An example sound entry.\", Colors.BLUE, \"icon-park-solid:volume-up\")\nclass ExampleSoundIdEntry(\n    override val id: String = \"\",\n    override val name: String = \"\",\n    override val soundId: String = \"\",\n) : SoundIdEntry"
  },
  "sound_source_entry": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/static/ExampleSoundSourceEntry.kt",
    "content": "@Entry(\"example_sound_source\", \"An example sound source entry.\", Colors.BLUE, \"ic:round-spatial-audio-off\")\nclass ExampleSoundSourceEntry(\n    override val id: String = \"\",\n    override val name: String = \"\",\n) : SoundSourceEntry, StaticEntry {\n    override fun getEmitter(player: Player): SoundEmitter {\n        // Return the emitter that should be used for the sound.\n        // An entity should be provided.\n        return SoundEmitter(player.entityId)\n    }\n}"
  },
  "speaker_entry": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/static/ExampleSpeakerEntry.kt",
    "content": "@Entry(\"example_speaker\", \"An example speaker entry.\", Colors.BLUE, \"ic:round-spatial-audio-off\")\nclass ExampleSpeakerEntry(\n    override val id: String = \"\",\n    override val name: String = \"\",\n    override val displayName: Var<String> = ConstVar(\"\"),\n    override val sound: Sound = Sound.EMPTY,\n) : SpeakerEntry"
  },
  "variable_entry": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/static/ExampleVariableEntry.kt",
    "content": "@Entry(\"example_variable\", \"An example variable entry.\", Colors.GREEN, \"mdi:code-tags\")\nclass ExampleVariableEntry(\n    override val id: String = \"\",\n    override val name: String = \"\",\n) : VariableEntry {\n    override fun <T : Any> get(context: VarContext<T>): T {\n        val player = context.player\n        val klass = context.klass\n\n        TODO(\"Do something with the player and the klass\")\n    }\n}"
  },
  "variable_entry_with_data": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/static/ExampleVariableEntry.kt",
    "content": "@Entry(\"example_variable_with_data\", \"An example variable entry with data.\", Colors.GREEN, \"mdi:code-tags\")\n// Register the variable data associated with this variable.\n@VariableData(ExampleVariableWithData::class)\nclass ExampleVariableWithDataEntry(\n    override val id: String = \"\",\n    override val name: String = \"\",\n    // This data will be the same for all uses of this variable.\n    val someString: String = \"\",\n) : VariableEntry {\n    override fun <T : Any> get(context: VarContext<T>): T {\n        val player = context.player\n        val klass = context.klass\n        this.someString\n        val data = context.getData<ExampleVariableWithData>() ?: throw IllegalStateException(\"Could not find data for ${context.klass}, data: ${context.data}\")\n\n        TODO(\"Do something with the player, the klass, and the data\")\n    }\n}\n\nclass ExampleVariableWithData(\n    // This data can change at the place where the variable is used.\n    val otherInfo: Int = 0,\n)"
  },
  "generic_variable_entry": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/static/ExampleVariableEntry.kt",
    "content": "@Entry(\"example_generic_variable\", \"An example generic variable entry.\", Colors.GREEN, \"mdi:code-tags\")\nclass ExampleGenericVariableEntry(\n    override val id: String = \"\",\n    override val name: String = \"\",\n    // We determine how to parse this during runtime.\n    val generic: Generic = Generic.Empty,\n) : VariableEntry {\n    override fun <T : Any> get(context: VarContext<T>): T {\n        val player = context.player\n        val klass = context.klass\n\n        // Parse the generic data to the correct type.\n        val data = generic.get(klass)\n\n        TODO(\"Do something with the player, the klass, and the generic\")\n    }\n}\n\nclass ExampleGenericVariableData(\n    // Generic data will always be the same as the generic type in the variable.\n    val otherGeneric: Generic,\n)"
  },
  "constraint_variable_entry": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/static/ExampleVariableEntry.kt",
    "content": "@Entry(\"example_constraint_variable\", \"An example constraint variable entry.\", Colors.GREEN, \"mdi:code-tags\")\n@GenericConstraint(String::class)\n@GenericConstraint(Int::class)\nclass ExampleConstraintVariableEntry(\n    override val id: String = \"\",\n    override val name: String = \"\",\n    // We determine how to parse this during runtime.\n    val generic: Generic = Generic.Empty,\n) : VariableEntry {\n    override fun <T : Any> get(context: VarContext<T>): T {\n        val player = context.player\n        // This can only be a String or an Int.\n        val klass = context.klass\n\n        // Parse the generic data to the correct type.\n        val data = generic.get(klass)\n\n        TODO(\"Do something with the player, the klass, and the generic\")\n    }\n}"
  },
  "variable_usage": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/static/ExampleVariableEntry.kt",
    "content": "@Entry(\"example_action_using_variable\", \"An example action that uses a variable.\", Colors.RED, \"material-symbols:touch-app-rounded\")\nclass ExampleActionUsingVariableEntry(\n    override val id: String = \"\",\n    override val name: String = \"\",\n    override val triggers: List<Ref<TriggerableEntry>> = emptyList(),\n    override val criteria: List<Criteria> = emptyList(),\n    override val modifiers: List<Modifier> = emptyList(),\n    val someString: Var<String> = ConstVar(\"\"),\n    val someInt: Var<Int> = ConstVar(0),\n) : ActionEntry {\n    override fun ActionTrigger.execute() {\n        val someString = someString.get(player)\n        val someInt = someInt.get(player)\n\n        // Do something with the variables\n    }\n}"
  },
  "action_entry": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/trigger/ExampleActionEntry.kt",
    "content": "@Entry(\"example_action\", \"An example action entry.\", Colors.RED, \"material-symbols:touch-app-rounded\")\nclass ExampleActionEntry(\n    override val id: String = \"\",\n    override val name: String = \"\",\n    override val criteria: List<Criteria> = emptyList(),\n    override val modifiers: List<Modifier> = emptyList(),\n    override val triggers: List<Ref<TriggerableEntry>> = emptyList(),\n) : ActionEntry {\n    override fun ActionTrigger.execute() {\n        // Do something with the player\n    }\n}"
  },
  "action_entry_manual": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/trigger/ExampleActionEntry.kt",
    "content": "    override fun ActionTrigger.execute() {\n        // This disables Typewriter's automatic triggering of the next entries,\n        // and disables the automatic apply of the modifiers.\n        disableAutomaticTriggering()\n\n        // Now you can manually trigger the next entries.\n        triggerManually()\n\n        // Or if you want to specify which triggers to trigger, you can do so.\n        triggers.filterIndexed { index, _ -> index % 2 == 0 }.triggerFor(player)\n\n        // You can also manually apply the modifiers.\n        applyModifiers()\n    }"
  },
  "dialogue_entry": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/trigger/ExampleDialogueEntry.kt",
    "content": "@Entry(\"example_dialogue\", \"An example dialogue entry.\", Colors.BLUE, \"material-symbols:chat-rounded\")\nclass ExampleDialogueEntry(\n    override val id: String = \"\",\n    override val name: String = \"\",\n    override val criteria: List<Criteria> = emptyList(),\n    override val modifiers: List<Modifier> = emptyList(),\n    override val triggers: List<Ref<TriggerableEntry>> = emptyList(),\n    override val speaker: Ref<SpeakerEntry> = emptyRef(),\n    @MultiLine\n    @Placeholder\n    @Colored\n    @Help(\"The text to display to the player.\")\n    val text: String = \"\",\n) : DialogueEntry {\n    // May return null to skip the dialogue\n    override fun messenger(player: Player, context: InteractionContext): DialogueMessenger<*>? {\n        // You can use if statements to return a different messenger depending on different conditions\n        return ExampleDialogueDialogueMessenger(player, context, this)\n    }\n}"
  },
  "dialogue_messenger": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/trigger/ExampleDialogueEntry.kt",
    "content": "class ExampleDialogueDialogueMessenger(player: Player, context: InteractionContext, entry: ExampleDialogueEntry) :\n    DialogueMessenger<ExampleDialogueEntry>(player, context, entry) {\n\n    // Called every game tick (20 times per second).\n    // The cycle is a parameter that is incremented every tick, starting at 0.\n    override fun tick(context: TickContext) {\n        super.tick(context)\n        if (state != MessengerState.RUNNING) return\n\n        player.sendMessage(\"${entry.speakerDisplayName}: ${entry.text}\".parsePlaceholders(player).asMini())\n\n        // When we want the dialogue to end, we can set the state to FINISHED.\n        state = MessengerState.FINISHED\n    }\n}"
  },
  "dialogue_confirmation_messenger": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/trigger/ExampleDialogueEntry.kt",
    "content": "class ExampleConfirmationDialogueMessenger(\n    player: Player,\n    context: InteractionContext,\n    entry: ExampleConfirmationDialogueEntry,\n) : DialogueMessenger<ExampleConfirmationDialogueEntry>(player, context, entry) {\n\n    // highlight-next-line\n    private var confirmationKeyHandler: ConfirmationKeyHandler? = null\n\n    override fun init() {\n        super.init()\n        player.sendMessage(\n            \"${entry.speakerDisplayName}: ${entry.text} <gray><confirmation_key>\".parsePlaceholders(\n                player\n            ).asMini()\n        )\n        // highlight-start\n        confirmationKeyHandler = confirmationKey.handler(player) {\n            state = MessengerState.FINISHED\n        }\n        // highlight-end\n    }\n\n    override fun dispose() {\n        super.dispose()\n        // highlight-start\n        confirmationKeyHandler?.dispose()\n        confirmationKeyHandler = null\n        // highlight-end\n    }\n}"
  },
  "event_entry": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/trigger/ExampleEventEntry.kt",
    "content": "@Entry(\"example_event\", \"An example event entry.\", Colors.YELLOW, \"material-symbols:bigtop-updates\")\nclass ExampleEventEntry(\n    override val id: String = \"\",\n    override val name: String = \"\",\n    override val triggers: List<Ref<TriggerableEntry>> = emptyList(),\n) : EventEntry"
  },
  "event_entry_listener": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/trigger/ExampleEventEntry.kt",
    "content": "@EntryListener(ExampleEventEntry::class)\nfun onEvent(event: SomeBukkitEvent, query: Query<ExampleEventEntry>) {\n    // Do something\n    val entries = query.find() // Find all the entries of this type, for more information see the Query section\n    // Do something with the entries, for example trigger them\n    entries.triggerAllFor(event.player, context())\n}"
  },
  "event_entry_with_context_keys": {
    "file": "src/main/kotlin/com/typewritermc/example/entries/trigger/ExampleEventEntry.kt",
    "content": "@Entry(\"example_event_with_context_keys\", \"An example event entry with context keys.\", Colors.YELLOW, \"material-symbols:bigtop-updates\")\n// This tells Typewriter that this entry exposes some context\n// highlight-next-line\n@ContextKeys(ExampleContextKeys::class)\nclass ExampleEventEntryWithContextKeys(\n    override val id: String = \"\",\n    override val name: String = \"\",\n    override val triggers: List<Ref<TriggerableEntry>> = emptyList(),\n) : EventEntry\n\n// highlight-start\nenum class ExampleContextKeys(override val klass: KClass<*>) : EntryContextKey {\n    // The two `String::class` have to be the same.\n    // The @KeyType is for the panel to know\n    @KeyType(String::class)\n    // The type here is for casting during runtime\n    TEXT(String::class),\n\n    @KeyType(Int::class)\n    NUMBER(Int::class),\n\n    // More complex types are also allowed.\n    @KeyType(Position::class)\n    POSITION(Position::class)\n}\n// highlight-end\n\n@EntryListener(ExampleEventEntryWithContextKeys::class)\nfun onEventAddContext(event: SomeBukkitEvent, query: Query<ExampleEventEntryWithContextKeys>) {\n    val entries = query.find()\n    // highlight-start\n    entries.triggerAllFor(event.player) {\n        // Make sure these values are drawn from the event.\n        // You MUST supply all the context keys.\n        ExampleContextKeys.TEXT withValue \"Hello World\"\n        ExampleContextKeys.NUMBER withValue 42\n        ExampleContextKeys.POSITION withValue Position.ORIGIN\n    }\n    // highlight-end\n}"
  }
}